server:
  port: 8100
spring:
  application:
    name: book-service
  boot: # Mal funcionamento
    admin:
      client:
        url: http://localhost:1111
        username: admin
        password: 123
        instance:
          prefer-ip: true
          metadata:
            management:
              port: 8150

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:54321/book_service
    username: root
    password: admin123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        generate_statistics: true
  flyway:
    url: jdbc:postgresql://localhost:54321/book_service
    user: root
    password: admin123
  sleuth:
    sampler:
      probability: 1.0 # Ambientes de dev: logar 1.0 -> 100%, prod: 0.05 -> 5%
  jackson:
    serialization:
      fail-on-empty-beans: false
    default-property-inclusion: non_null
  main:
    allow-bean-definition-overriding: true
  cache:
    type: jcache
    jcache:
      provider: com.hazelcast.cache.impl.HazelcastServerCachingProvider
      config: classpath:hazelcast.xml
springdoc:
  show-actuator: true
  api-docs:
    path: book-service/v3/api-docs
  swagger-ui:
    config-url: /book-service/v3/api-docs/swagger-config
    url: /book-service/v3/api-docs
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
resilience4j:
  retry:
    instances:
      foo-bar:
        max-attempts: 5
        wait-duration: 1s
        enable-exponential-backoff: true
  ratelimiter:
    instances:
      foo-bar:
        limit-for-period: 2
        limit-refresh-period: 10s
  #      getBookRL:
  #        limit-for-period: 1
  #        limit-refresh-period: 10s
  bulkhead:
    instances:
      foo-bar:
        max-concurrent-calls: 10
  circuitbreaker:
    instances:
      getBookCB:
        minimum-number-of-calls: 4
        sliding-window-size: 8

#Referência: https://www.youtube.com/watch?v=S8pTyk6WYqs&list=PLZTjHbp2Y7809w3PLM0UE_LgQq6vk49q0&index=2
bucket4j:
  enabled: true
  filters:
    - cache-name: rateLimitMessage
      url: .*
      filter-order: 100 # Deve ser executado após o filtro do Spring Security, caso esteja usando módulo de segurança na aplicação
      rate-limits:
        - execute-condition: "@userAuthenticatedMockService.isAuthenticated()"
          expression: "@userAuthenticatedMockService.getUsername()"
          bandwidths:
            - capacity: 10
              time: 1
              unit: minutes

        - execute-condition: "@userNotAuthenticatedMockService.isNotAuthenticated()"
          expression: "getRemoteAddr()" # Retorna o IP address
          bandwidths:
            - capacity: 5
              time: 1
              unit: minutes

#        - bandwidths:
#            - capacity: 5
#              time: 2
#              unit: minutes

#Referência: https://www.youtube.com/watch?v=9dXxm3ff4oI&t=68s
#Parte de segurança não implementada para o actuator
management:
  # Porta separada para o servidor do actuator, demanda mais recurso porém garante mais segurança
  server:
    port: 8150
  endpoints:
    enabled-by-default: false
    web:
#      base-path: '/manager' //Sobrescreve path raiz
#      path-mapping:        //Sobrescreve outros paths
#        health: 'saude'
#        metrics: 'metricas'
      exposure:
        include: 'metrics, health, info, auditevents, loggers, books, prometheus' # Para adicionar todas metricas (Não usar para prod), utilizar: include: '*'
  metrics:
    enable:
      executor: false
  info:
    env:
      enabled: true
    java:
      enabled: true
  endpoint:
    health:
      enabled: true
      show-details: always
#      show-details: when_authorized
#      roles: 'ADMIN'
    metrics:
      enabled: true
    info:
      enabled: true
    auditevents: # Registra eventos de login e outros, ideal para prod
      enabled: true
    loggers:
      enabled: true
    prometheus:
      enabled: true

info:
  application:
    name: ${spring.application.name}
    description: API de livros
